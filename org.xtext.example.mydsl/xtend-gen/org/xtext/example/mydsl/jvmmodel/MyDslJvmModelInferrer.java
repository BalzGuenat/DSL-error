/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.jvmmodel;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmConstructor;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.example.mydsl.myDsl.Check;
import org.xtext.example.mydsl.myDsl.Checker;
import org.xtext.example.mydsl.myDsl.Module;
import org.xtext.example.mydsl.myDsl.Table;
import org.xtext.example.mydsl.myDsl.UseTable;
import sharedclasses.BaseTable;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class MyDslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  protected void _infer(final Module module, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EList<Table> _tables = module.getTables();
    for (final Table table : _tables) {
      this.infer(table, acceptor, isPreIndexingPhase);
    }
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<Table> _tables_1 = module.getTables();
      for (final Table table_1 : _tables_1) {
        EList<JvmMember> _members = it.getMembers();
        JvmField _inferTableField = this.inferTableField(table_1);
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _inferTableField);
      }
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(module, this._iQualifiedNameProvider.getFullyQualifiedName(module)), _function);
  }
  
  /**
   * Calculates the fully qualified name of the Table's class.<br>
   * If the Table is contained (ie. by a IDC Checker or Module),
   * then the class's simple name is constructed by the container's name and the Table's name.
   */
  public QualifiedName getTableClassQN(final Table table) {
    QualifiedName tableQN = null;
    EObject _eContainer = table.eContainer();
    boolean _tripleNotEquals = (_eContainer != null);
    if (_tripleNotEquals) {
      tableQN = this._iQualifiedNameProvider.getFullyQualifiedName(table.eContainer());
    }
    if ((tableQN == null)) {
      tableQN = this._iQualifiedNameProvider.getFullyQualifiedName(table);
    }
    QualifiedName _skipLast = tableQN.skipLast(1);
    String _lastSegment = tableQN.getLastSegment();
    String _plus = (_lastSegment + "_");
    String _name = table.getName();
    String _plus_1 = (_plus + _name);
    return _skipLast.append(_plus_1);
  }
  
  /**
   * Infers the Table's class and registers the class in the global repository.
   */
  protected void _infer(final Table table, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final QualifiedName tableClassQN = this.getTableClassQN(table);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(BaseTable.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
      final Procedure1<JvmConstructor> _function_1 = (JvmConstructor it_1) -> {
      };
      final JvmConstructor constructor = this._jvmTypesBuilder.toConstructor(table, _function_1);
      final Procedure1<ITreeAppendable> _function_2 = (ITreeAppendable it_1) -> {
      };
      this._jvmTypesBuilder.setBody(constructor, _function_2);
      EList<JvmMember> _members = it.getMembers();
      this._jvmTypesBuilder.<JvmConstructor>operator_add(_members, constructor);
    };
    final JvmGenericType tableClass = this._jvmTypesBuilder.toClass(table, tableClassQN, _function);
    acceptor.<JvmGenericType>accept(tableClass);
  }
  
  /**
   * Infers a field with the type of the Table's class taken from the global repository.
   */
  public JvmField inferTableField(final Table table) {
    final QualifiedName tableClassQN = this.getTableClassQN(table);
    final Procedure1<JvmField> _function = (JvmField it) -> {
      final Procedure1<ITreeAppendable> _function_1 = (ITreeAppendable it_1) -> {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("new ");
        String _qualifiedName = this._typeReferenceBuilder.typeRef(tableClassQN.toString()).getQualifiedName();
        _builder.append(_qualifiedName);
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        it_1.append(_builder);
      };
      this._jvmTypesBuilder.setInitializer(it, _function_1);
    };
    return this._jvmTypesBuilder.toField(table, table.getName(), this._typeReferenceBuilder.typeRef(tableClassQN.toString()), _function);
  }
  
  protected void _infer(final Checker checker, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    EList<Table> _tables = checker.getTables();
    for (final Table table : _tables) {
      this.infer(table, acceptor, isPreIndexingPhase);
    }
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<UseTable> _useTables = checker.getUseTables();
      for (final UseTable useTable : _useTables) {
        EList<JvmMember> _members = it.getMembers();
        JvmField _inferTableField = this.inferTableField(useTable.getTable());
        this._jvmTypesBuilder.<JvmField>operator_add(_members, _inferTableField);
      }
      EList<Table> _tables_1 = checker.getTables();
      for (final Table table_1 : _tables_1) {
        EList<JvmMember> _members_1 = it.getMembers();
        JvmField _inferTableField_1 = this.inferTableField(table_1);
        this._jvmTypesBuilder.<JvmField>operator_add(_members_1, _inferTableField_1);
      }
      EList<Check> _checks = checker.getChecks();
      for (final Check check : _checks) {
        EList<JvmMember> _members_2 = it.getMembers();
        final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
          this._jvmTypesBuilder.setBody(it_1, check.getBody());
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(check, check.getName(), this._typeReferenceBuilder.typeRef(void.class), _function_1);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_2, _method);
      }
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(checker, this._iQualifiedNameProvider.getFullyQualifiedName(checker)), _function);
  }
  
  public void infer(final EObject checker, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (checker instanceof Checker) {
      _infer((Checker)checker, acceptor, isPreIndexingPhase);
      return;
    } else if (checker instanceof Module) {
      _infer((Module)checker, acceptor, isPreIndexingPhase);
      return;
    } else if (checker instanceof Table) {
      _infer((Table)checker, acceptor, isPreIndexingPhase);
      return;
    } else if (checker != null) {
      _infer(checker, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(checker, acceptor, isPreIndexingPhase).toString());
    }
  }
}
